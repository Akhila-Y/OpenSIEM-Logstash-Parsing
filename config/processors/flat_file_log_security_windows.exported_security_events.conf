# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  json {
    source => "message"
    target => "tmp_msg"
  }
  mutate {
    add_tag => [ "first json" ]
  }
  json {
    source => "[tmp_msg][Payload]"
    target => "tmp"
  }
  mutate {
    add_tag => [ "second json" ]
  }
  ruby {
    code => "
      tmp_dct = Hash.new
      if event.get('[tmp][EventData][Data]').kind_of?(Array)
        event.get('[tmp][EventData][Data]').each do |item|
          tmp_dct[item['@Name']] = item['#text']
        end
      end
      event.set('payload_dct', tmp_dct)  
    "
  }
  mutate {
    add_tag => [ "ruby block done" ]
  }
  mutate {
    rename => { "path" => "log.file.path" }
    rename => { "host" => "host.name" }
    rename => { "[tmp_msg][Provider]" => "event.provider" }
    rename => { "[tmp_msg][EventId]" => "event.id" }
    rename => { "[tmp_msg][MapDescription]" => "event.outcome" }
    rename => { "[tmp_msg][Keywords]" => "event.action" }
    rename => { "[tmp_msg][PayloadData1]" => "event.reason" }
    rename => { "[tmp_msg][PayloadData2]" => "event.kind" }
    rename => { "[tmp_msg][Channel]" => "event.dataset" }
    rename => { "[tmp_msg][ChunkNumber]" => "process.entity_id" }
    rename => { "[tmp_msg][ProcessId]" => "process.pid" }
    rename => { "[tmp_msg][ThreadId]" => "process.thread.id" }
    rename => { "[tmp_msg][Computer]" => "host.type" }
    rename => { "[tmp_msg][TimeCreated]" => "event.created" }
    rename => { "[tmp_msg][SourceFile]" => "file.path" }
    
    rename => { "[payload_dct][TargetUserName]" => "user.name" }
    rename => { "[payload_dct][LmPackageName]" => "package.name" }
    rename => { "[payload_dct][AuthenticationPackageName]" => "process.name" }
    rename => { "[payload_dct][TargetDomainName]" => "destination.domain" }
    rename => { "[payload_dct][LogonGuid]" => "server.user.group.id" }
    rename => { "[payload_dct][TargetUserSid]" => "destination.user.id" }
    rename => { "[payload_dct][IpPort]" => "source.port" }
    rename => { "[payload_dct][WorkstationName]" => "host.type" }
  }
  mutate {
    add_tag => [ "mutate done" ]
  }
  if [payload_dct][IpAddress] == "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
    mutate {
      rename => { "[payload_dct][IpAddress]" => "source.ip" }
    }
  }
  mutate {
    add_tag => [ "ip format done" ]
  }
  mutate {
    remove_field => [ "tmp_msg", "tmp", "payload_dct" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
