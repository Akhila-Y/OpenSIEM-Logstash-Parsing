# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    gsub => [ "message",'[\"]',"" ]
  }
  grok {
    match => { "message" => "(?<date.time>.*?),(?<client_ip>.*?),(?<client_hostname>.*?),(?<server_ip>.*?),(?<server_hostname>.*?),(?<source_context>.*),(?<connector_id>.*?),(?<source>.*?),(?<event_id>.*?),(?<internal_message_id>.*?),(?<message_id>.*?),(?<network_message_id>.*?),(?<recipient_address>.*?),(?<recipient_status>.*?),(?<total_bytes>.*?),(?<recipient_count>.*?),(?<related_recipient_address>.*?),(?<reference>.*?),(?<message_subject>.*?),(?<sender_address>.*?),(?<return_path>.*?),(?<message_info>.*?),(?<directionality>.*?),(?<tenant_id>.*?),(?<original_client_ip>.*?),(?<original_server_ip>.*?),(?<custom_data>.*?),(?<transport-traffic-type>.*?),(?<log-id>.*?),(?<schema-version>.*?)$" }
  }
  if [original_client_ip] {
    if [original_client_ip] !~ "[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 2" }
      }
      csv {
        source => "message"
        target => "exch" 
        columns => ['client_ip', 'client_hostname',  'server_ip', 'server_hostname', 'source_context', 'connector_id','col1','col2','col3','col4' ,'col5','col6','col7' ,'recipient_address', 'recipient_status', 'total_bytes', 'recipient_count', 'related_recipient_address', 'reference', 'message_subject', 'sender_address', 'return_path', 'message_info', 'directionality', 'tenant_id', 'original_client_ip', 'original_server_ip', 'custom_data']
      }
      mutate {
        remove_field =>[ "[original_client_ip]" ]
      }
    }
  }
  mutate {
    gsub => [ "[custom_data]", "S:", "" ]
  }
  if [source_context] =~ "^;" {
    mutate {
      gsub => [ "[source_context]",";250","" ]
    }
  }
  if [source_context] =~ ";" and [source_context] =~ "=" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1" }
    }
    kv {
      source => "[source_context]"
      target => "context"
      field_split => ";"
      value_split => "="
    }
  }
  kv {
    source => "[custom_data]"
    target => "custom"
    field_split => ";"
    value_split => "="
  }
  mutate {
    convert => [ "total_bytes", "integer" ]
    convert => [ "recipient_count", "integer" ]
    split => [ "[related_recipient_address]", ";" ]
    split => [ "[recipient_address]", ";" ]
  }
  mutate {
    rename => { "syslog_facility_code" => "log.syslog.facility.code" }
    rename => { "syslog_facility" => "log.syslog.facility.name" }
    rename => { "syslog_severity_code" => "log.syslog.severity.code" }
    rename => { "syslog_severity" => "log.syslog.severity.name" }
    rename => { "[custom][AccountForest]" => "user.domain" }
    rename => { "[custom][OriginalFromAddress]" => "source.user.email" }
    rename => { "[event_id]" => "rule.name" }
    rename => { "[transport-traffic-type]" => "network.protocol" }
    rename => { "[recipient_status]" => "event.action" }
    rename => { "[directionality]" => "network.direction" }
    rename => { "[network_message_id]" => "event.code" }
    rename => { "[message_subject]" => "email.subject" }
    rename => { "[total_bytes]" => "source.bytes" }
    rename => { "[original_client_ip]" => "source.ip" }
    rename => { "[sender_address]" => "source.user.email" }
    rename => { "[client_hostname]" => "client.address" }
    rename => { "[client_ip]" => "client.ip" }
    rename => { "[server_hostname]" => "server.address" }
    # rename => { "[return_path]" => "this is email or.." }
    rename => { "[server_ip]" => "server.ip" }
    rename => { "[message_id]" => "event.id" }
    rename => { "[custom][AccountForest]" => "user.domain" }
    rename => { "[custom][OriginalFromAddress]" => "source.user.email" }
    rename => { "host.name" => "log.source.hostname" }
  }
  if [recipient_address] and [recipient_address] != "nil" {
    mutate {
        rename => { "[recipient_address]" => "destination.user.email" }
    }
  }
  if [related_recipient_address] and [related_recipient_address]!= "nil" {
    mutate {
      rename => { "[related_recipient_address]" => "destination.user.email" }
    }
  }
  if [log_time] {
    date {
      match => [ "log_time" , "ISO8601" ]
      timezone => "GMT"
      target => "event.created"
    }
  }
  mutate {
    remove_field => [ "rest_msg", "[custom_data]", "log_time", "[custom]", "[context]", "recipient_count", "log-id", "schema-version", "internal_message_id" ]
  }
  mutate {
    add_field => { "event.module" => "2016 exchange message tracking" }
    add_field => { "event.dataset" => "message tracking logs" }
    add_field => { "observer.vendor" => "microsoft" }
    add_field => { "observer.product" => "exchange" }
    add_field => { "observer.type" => "flat file" }
  }
}
output {
  pipeline { send_to => [enrichments] }
}
